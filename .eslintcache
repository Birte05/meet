[{"/Users/birtegall/Workspace/CareerFoundry/meet/src/index.js":"1","/Users/birtegall/Workspace/CareerFoundry/meet/src/App.js":"2","/Users/birtegall/Workspace/CareerFoundry/meet/src/reportWebVitals.js":"3","/Users/birtegall/Workspace/CareerFoundry/meet/src/EventList.js":"4","/Users/birtegall/Workspace/CareerFoundry/meet/src/Event.js":"5","/Users/birtegall/Workspace/CareerFoundry/meet/src/CitySearch.js":"6","/Users/birtegall/Workspace/CareerFoundry/meet/src/NumberOfEvents.js":"7","/Users/birtegall/Workspace/CareerFoundry/meet/src/mock-data.js":"8","/Users/birtegall/Workspace/CareerFoundry/meet/src/api.js":"9","/Users/birtegall/Workspace/CareerFoundry/meet/src/Alert.js":"10","/Users/birtegall/Workspace/CareerFoundry/meet/src/serviceWorker.js":"11","/Users/birtegall/Workspace/CareerFoundry/meet/src/EventGenre.js":"12"},{"size":364,"mtime":1608905383155,"results":"13","hashOfConfig":"14"},{"size":2730,"mtime":1609055677585,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1607284835711,"results":"16","hashOfConfig":"17"},{"size":673,"mtime":1609057863156,"results":"18","hashOfConfig":"14"},{"size":756,"mtime":1608997321232,"results":"19","hashOfConfig":"14"},{"size":1953,"mtime":1608907809565,"results":"20","hashOfConfig":"14"},{"size":1136,"mtime":1609057610167,"results":"21","hashOfConfig":"14"},{"size":33555,"mtime":1608657390987,"results":"22","hashOfConfig":"14"},{"size":3722,"mtime":1608906221626,"results":"23","hashOfConfig":"14"},{"size":720,"mtime":1608907278887,"results":"24","hashOfConfig":"14"},{"size":5086,"mtime":1608905291774,"results":"25","hashOfConfig":"14"},{"size":1320,"mtime":1609001109523,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"tt0hbf",{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"dde31r",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"29"},"/Users/birtegall/Workspace/CareerFoundry/meet/src/index.js",[],["55","56"],"/Users/birtegall/Workspace/CareerFoundry/meet/src/App.js",["57","58","59","60","61"],"import React, { Component } from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport { extractEvents, extractLocations, getEvents } from \"./api\";\nimport Event from './Event';\nimport NumberOfEvents from './NumberOfEvents';\nimport \"./nprogress.css\";\nimport { mockData } from \"./mock-data\";\nimport { InfoAlert, ErrorAlert, OfflineAlert } from './Alert';\nimport {ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer} from 'recharts';\nimport EventGenre from './EventGenre';\n\nclass App extends Component {\n  state = {\n    locations: [],\n    events: [],\n    numberOfEvents: 32,\n    infoText: '',\n    errMessage: '',\n    offlineText: ''\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    getEvents().then((events) => {\n      if (this.mounted) {\n        this.setState({ events: events, locations: extractLocations(events) });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  // Task 4.4\n  updateEvents = (location) => {\n\n    getEvents().then((events) => {\n      const locationEvents = (location === 'all') ?\n        events :\n        events.filter((event) => event.location === location);\n      this.setState({\n        events:  locationEvents.slice(0, this.state.eventCount),\n      });\n    });\n  }\n\n  getData = () => {\n    const {locations, events} = this.state;\n    const data = locations.map((location)=>{\n      const number = events.filter((event) => event.location === location).length\n      const city = location.split(' ').shift()\n      return {city, number};\n    })\n    return data;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n      <h1>List of Coding Events</h1>\n\n      <p>Choose your nearest location</p>\n        <CitySearch locations={this.state.locations} updateEvents={this.updateEvents} />\n        <InfoAlert className=\"info-text\" text={this.state.infoText} />\n        <NumberOfEvents numberOfEvents={this.state.result} updateEvents={this.updateEvents} />\n        <ErrorAlert text={this.state.errMessage} />\n\n      <div className='data-vis-wrapper'>\n        {/* <EventGenre events={events}/> */}\n\n        <ResponsiveContainer height={400} >\n        <ScatterChart margin={{top: 20, right: 20, bottom: 20, left: 20,}}>\n          <CartesianGrid />\n          <XAxis type=\"category\" dataKey=\"city\" name=\"city\"/>\n          <YAxis type=\"number\" dataKey=\"number\" name=\"number of events\" allowDecimals={false}/>\n          <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n          <Scatter data={this.getData()} fill=\"#8884d8\" />\n        </ScatterChart>\n        </ResponsiveContainer>\n      </div>\n      <EventList events={this.state.events} />\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/birtegall/Workspace/CareerFoundry/meet/src/reportWebVitals.js",[],["62","63"],"/Users/birtegall/Workspace/CareerFoundry/meet/src/EventList.js",[],"/Users/birtegall/Workspace/CareerFoundry/meet/src/Event.js",[],"/Users/birtegall/Workspace/CareerFoundry/meet/src/CitySearch.js",[],"/Users/birtegall/Workspace/CareerFoundry/meet/src/NumberOfEvents.js",[],"/Users/birtegall/Workspace/CareerFoundry/meet/src/mock-data.js",[],"/Users/birtegall/Workspace/CareerFoundry/meet/src/api.js",[],"/Users/birtegall/Workspace/CareerFoundry/meet/src/Alert.js",[],"/Users/birtegall/Workspace/CareerFoundry/meet/src/serviceWorker.js",[],"/Users/birtegall/Workspace/CareerFoundry/meet/src/EventGenre.js",["64"],"import React, { useEffect, useState } from 'react';\nimport { ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\n\nconst EventGenre = ({ events }) => {\n  const [data, setData] = useState([]);\n  useEffect(() => { setData(() => getData());}, [events]);\n\n\nconst getData = () => {\n  const genres = ['React', 'JavaScript', 'Node', 'jQuery', 'AngularJS'];\n  const data = genres.map((genre) => { //genreData\n      const value = events.filter(({ summary }) => summary.split(' ').includes(genre)).length;\n  return { name: genre, value };\n  });\n  return data;\n  };\n\n  const COLORS = ['#0099FF', '#00CC99', '#FFCC33', '#FF9933', '#9966CC'];\n\n  console.log(events);\n\nreturn (\n  <ResponsiveContainer height={400} >\n      <PieChart width={400} height={400} >\n          <Pie\n              data={data}\n              cx={200}\n              cy={200}\n              labelLine={false}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"value\"\n              label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n          >\n              {\n                  data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} name={entry.name} />)\n              }\n          </Pie>\n      </PieChart>\n  </ResponsiveContainer>\n\n);\n\n\n};\n\nexport default EventGenre;\n",{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":5,"column":10,"nodeType":"71","messageId":"72","endLine":5,"endColumn":23},{"ruleId":"69","severity":1,"message":"73","line":6,"column":8,"nodeType":"71","messageId":"72","endLine":6,"endColumn":13},{"ruleId":"69","severity":1,"message":"74","line":9,"column":10,"nodeType":"71","messageId":"72","endLine":9,"endColumn":18},{"ruleId":"69","severity":1,"message":"75","line":10,"column":33,"nodeType":"71","messageId":"72","endLine":10,"endColumn":45},{"ruleId":"69","severity":1,"message":"76","line":12,"column":8,"nodeType":"71","messageId":"72","endLine":12,"endColumn":18},{"ruleId":"65","replacedBy":"77"},{"ruleId":"67","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":6,"column":49,"nodeType":"81","endLine":6,"endColumn":57,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'extractEvents' is defined but never used.","Identifier","unusedVar","'Event' is defined but never used.","'mockData' is defined but never used.","'OfflineAlert' is defined but never used.","'EventGenre' is defined but never used.",["83"],["84"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [events, getData]",{"range":"88","text":"89"},[247,255],"[events, getData]"]